// Generated by scripts/generate-node-palettes.mjs
// DO NOT EDIT MANUALLY

export enum NodeColor {
  STANDARD_GRAY = "standard-gray",
  STANDARD_RED = "standard-red",
  STANDARD_ORANGE = "standard-orange",
  STANDARD_YELLOW = "standard-yellow",
  STANDARD_GREEN = "standard-green",
  STANDARD_TEAL = "standard-teal",
  STANDARD_BLUE = "standard-blue",
  STANDARD_PURPLE = "standard-purple",
  STANDARD_PINK = "standard-pink",
  STANDARD_BROWN = "standard-brown",
  STANDARD_OLIVE = "standard-olive",
  STANDARD_PEACH = "standard-peach",
  STANDARD_MINT = "standard-mint",
  STANDARD_SKY = "standard-sky",
  SOLID_WHITE = "solid-white",
  SOLID_RED = "solid-red",
  SOLID_ORANGE = "solid-orange",
  SOLID_YELLOW = "solid-yellow",
  SOLID_GREEN = "solid-green",
  SOLID_CYAN = "solid-cyan",
  SOLID_BLUE = "solid-blue",
  SOLID_PURPLE = "solid-purple",
}

export interface ColorSet {
  id: string;
  name: string;
  description: string;
  colors: NodeColor[];
}

export const COLOR_SETS: ColorSet[] = [
  {
    id: "standard",
    name: "Standard",
    description: "Classic color palette",
    colors: [
      NodeColor.STANDARD_GRAY,
      NodeColor.STANDARD_RED,
      NodeColor.STANDARD_ORANGE,
      NodeColor.STANDARD_YELLOW,
      NodeColor.STANDARD_GREEN,
      NodeColor.STANDARD_TEAL,
      NodeColor.STANDARD_BLUE,
      NodeColor.STANDARD_PURPLE,
      NodeColor.STANDARD_PINK,
      NodeColor.STANDARD_BROWN,
      NodeColor.STANDARD_OLIVE,
      NodeColor.STANDARD_PEACH,
      NodeColor.STANDARD_MINT,
      NodeColor.STANDARD_SKY,
    ],
  },
  {
    id: "solid",
    name: "Solid",
    description: "Solid colors with dark text",
    colors: [
      NodeColor.SOLID_WHITE,
      NodeColor.SOLID_RED,
      NodeColor.SOLID_ORANGE,
      NodeColor.SOLID_YELLOW,
      NodeColor.SOLID_GREEN,
      NodeColor.SOLID_CYAN,
      NodeColor.SOLID_BLUE,
      NodeColor.SOLID_PURPLE,
    ],
  },
];

export const DEFAULT_SELECTABLE_NODE_COLORS = COLOR_SETS[0].colors;

export const NODE_COLOR_DEFAULT = NodeColor.STANDARD_GRAY;

const NodeColorSet = new Set(Object.values(NodeColor) as string[]);
export const isNodeColor = (value?: string): value is NodeColor =>
  !!value && NodeColorSet.has(value);

export const getRandomColor = (): NodeColor => {
  const colors = Object.values(NodeColor);
  return colors[Math.floor(Math.random() * colors.length)];
};
